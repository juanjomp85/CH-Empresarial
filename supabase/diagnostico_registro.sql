-- =====================================================
-- DIAGN√ìSTICO COMPLETO: ¬øPor qu√© falla el registro?
-- =====================================================

-- =====================================================
-- 1. VERIFICAR SI EL EMAIL YA EST√Å REGISTRADO
-- =====================================================

SELECT 
    '1Ô∏è‚É£ USUARIOS EXISTENTES EN AUTH' as seccion,
    email,
    created_at,
    confirmed_at,
    CASE 
        WHEN confirmed_at IS NULL THEN '‚ö†Ô∏è  No confirmado'
        ELSE '‚úÖ Confirmado'
    END as estado
FROM auth.users
WHERE email ILIKE '%informatica@aspapros.es%'
   OR email ILIKE '%aspapros%';

-- =====================================================
-- 2. VERIFICAR EMPLEADOS EXISTENTES
-- =====================================================

SELECT 
    '2Ô∏è‚É£ EMPLEADOS EXISTENTES' as seccion,
    e.email,
    e.full_name,
    e.user_id,
    e.is_active,
    e.created_at
FROM employees e
WHERE e.email ILIKE '%informatica@aspapros.es%'
   OR e.email ILIKE '%aspapros%'
   OR e.full_name ILIKE '%aspapros%';

-- =====================================================
-- 3. VERIFICAR POL√çTICAS RLS DE EMPLOYEES
-- =====================================================

SELECT 
    '3Ô∏è‚É£ POL√çTICAS RLS PARA INSERT' as seccion,
    policyname as politica,
    cmd as comando,
    qual as condicion,
    with_check as verificacion
FROM pg_policies 
WHERE tablename = 'employees'
AND cmd = 'INSERT'
ORDER BY policyname;

-- =====================================================
-- 4. VERIFICAR SI HAY FUNCIONES/TRIGGERS ACTIVOS
-- =====================================================

-- Triggers en auth.users
SELECT 
    '4Ô∏è‚É£ TRIGGERS EN AUTH.USERS' as seccion,
    trigger_name,
    event_manipulation,
    action_timing,
    action_statement
FROM information_schema.triggers
WHERE event_object_schema = 'auth'
AND event_object_table = 'users';

-- Triggers en employees
SELECT 
    '4Ô∏è‚É£ TRIGGERS EN EMPLOYEES' as seccion,
    trigger_name,
    event_manipulation,
    action_timing,
    action_statement
FROM information_schema.triggers
WHERE event_object_schema = 'public'
AND event_object_table = 'employees';

-- =====================================================
-- 5. VERIFICAR CONSTRAINT √öNICO
-- =====================================================

SELECT 
    '5Ô∏è‚É£ CONSTRAINTS √öNICOS' as seccion,
    constraint_name,
    column_name,
    '‚úÖ Configurado' as estado
FROM information_schema.constraint_column_usage
WHERE table_name = 'employees'
AND constraint_name LIKE '%user_id%';

-- =====================================================
-- 6. PROBAR CREACI√ìN MANUAL DE EMPLEADO
-- =====================================================

-- Esta query simula lo que intentar√≠a hacer la app
-- IMPORTANTE: Reemplaza 'uuid-de-prueba' con un UUID real o comenta esta secci√≥n

/*
DO $$
DECLARE
    test_user_id UUID := 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'::UUID;
BEGIN
    -- Intentar crear un empleado de prueba
    BEGIN
        INSERT INTO employees (
            user_id,
            email,
            full_name,
            role,
            is_active,
            department_id,
            position_id,
            hourly_rate
        ) VALUES (
            test_user_id,
            'test@ejemplo.com',
            'Usuario Test',
            'employee',
            true,
            NULL,
            NULL,
            0
        );
        RAISE NOTICE '‚úÖ INSERT funcion√≥ correctamente';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå ERROR al insertar: %', SQLERRM;
    END;
    
    -- Limpiar prueba
    DELETE FROM employees WHERE user_id = test_user_id;
END $$;
*/

-- =====================================================
-- 7. VERIFICAR CONFIGURACI√ìN DE SUPABASE AUTH
-- =====================================================

SELECT 
    '7Ô∏è‚É£ CONFIGURACI√ìN AUTH' as seccion,
    'Revisa en Dashboard ‚Üí Authentication ‚Üí Settings' as instruccion,
    '- Enable email confirmations?' as check_1,
    '- Auto-confirm users?' as check_2,
    '- Secure email change?' as check_3;

-- =====================================================
-- 8. VER LOGS RECIENTES DE ERRORES (si existen)
-- =====================================================

-- Nota: Esta tabla puede no existir dependiendo de tu configuraci√≥n
DO $$ 
BEGIN
    IF EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'error_logs') THEN
        EXECUTE 'SELECT * FROM error_logs ORDER BY created_at DESC LIMIT 10';
    ELSE
        RAISE NOTICE 'No hay tabla error_logs configurada';
    END IF;
END $$;

-- =====================================================
-- RESUMEN DE POSIBLES CAUSAS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç POSIBLES CAUSAS DEL ERROR:';
    RAISE NOTICE '';
    RAISE NOTICE '1Ô∏è‚É£  Email ya existe en auth.users';
    RAISE NOTICE '   ‚Üí Query 1 mostrar√° el usuario existente';
    RAISE NOTICE '   ‚Üí Soluci√≥n: Usa otro email o elimina el usuario';
    RAISE NOTICE '';
    RAISE NOTICE '2Ô∏è‚É£  Pol√≠ticas RLS bloquean el INSERT';
    RAISE NOTICE '   ‚Üí Query 3 debe mostrar "Users can create their own employee record"';
    RAISE NOTICE '   ‚Üí Si no aparece, ejecuta fix_registration_simple.sql';
    RAISE NOTICE '';
    RAISE NOTICE '3Ô∏è‚É£  Trigger est√° fallando';
    RAISE NOTICE '   ‚Üí Query 4 mostrar√° triggers activos';
    RAISE NOTICE '   ‚Üí Si hay trigger en auth.users, puede estar causando error';
    RAISE NOTICE '';
    RAISE NOTICE '4Ô∏è‚É£  Confirmaci√≥n de email requerida';
    RAISE NOTICE '   ‚Üí Revisa Dashboard ‚Üí Authentication ‚Üí Settings';
    RAISE NOTICE '   ‚Üí Si "Enable email confirmations" est√° activo, el usuario debe confirmar';
    RAISE NOTICE '';
    RAISE NOTICE '5Ô∏è‚É£  Error en el frontend (mensaje gen√©rico)';
    RAISE NOTICE '   ‚Üí Abre la consola del navegador (F12)';
    RAISE NOTICE '   ‚Üí Busca el error real de Supabase';
    RAISE NOTICE '';
END $$;

-- =====================================================
-- QUERIES DE LIMPIEZA (OPCIONAL)
-- =====================================================

-- ‚ö†Ô∏è  SOLO EJECUTA ESTAS SI QUIERES ELIMINAR USUARIOS DE PRUEBA

-- Ver usuarios que NO tienen empleado asociado
/*
SELECT 
    u.email,
    u.created_at,
    u.confirmed_at,
    '‚ùå Sin empleado asociado' as estado
FROM auth.users u
LEFT JOIN employees e ON e.user_id = u.id
WHERE e.id IS NULL
ORDER BY u.created_at DESC;
*/

-- Eliminar usuario espec√≠fico (CUIDADO!)
/*
DELETE FROM auth.users 
WHERE email = 'informatica@aspapros.es';
*/

